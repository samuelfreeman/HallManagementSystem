// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output = "../ERD.png"
}
datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

/// the admin that assigns a room to the student  and overlooks the application
model admin {
  id        String   @id @default(uuid())
  fullname  String
  email     String   @unique
  password  String
  telephone String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model student {
  studentId    String      @id @default(uuid())
  profile      String
  fullName     String
  email        String?
  password     String
  gender       String      
  level        Int
  telephone    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  department   department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  allocation   allocation?
  hall         hall?       @relation(fields: [hallId], references: [id])
  hallId       String?
}

model allocation {
  id        String   @id @default(uuid())
  student   student  @relation(fields: [studentId], references: [studentId])
  studentId String   @unique
  rooms     rooms?   @relation(fields: [roomsId], references: [id])
  roomsId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model rooms {
  id         String       @id @default(uuid())
  roomnumber Int          @unique
  status     status
  blockName  String
  createdAt  DateTime     @default(now())
  allocation allocation[]
  hall       hall?        @relation(fields: [hallId], references: [id])
  hallId     String?
}

model department {
  id        String    @id @default(uuid())
  name      String
  student   student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model hall {
  id       String    @id @default(uuid())
  name     String
  location String
  student  student[]
  rooms    rooms[]
}

enum status {
  Vacant
  Occupied
  Partially_Occupied
}

